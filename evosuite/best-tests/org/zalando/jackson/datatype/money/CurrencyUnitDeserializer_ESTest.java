/*
 * This file was automatically generated by EvoSuite
 * Wed Feb 26 14:46:58 GMT 2020
 */

package org.zalando.jackson.datatype.money;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.fasterxml.jackson.core.JsonParser;
import com.fasterxml.jackson.databind.DeserializationContext;
import com.fasterxml.jackson.databind.jsontype.TypeDeserializer;
import javax.money.UnknownCurrencyException;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.junit.runner.RunWith;
import org.zalando.jackson.datatype.money.CurrencyUnitDeserializer;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class CurrencyUnitDeserializer_ESTest extends CurrencyUnitDeserializer_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test0()  throws Throwable  {
      CurrencyUnitDeserializer currencyUnitDeserializer0 = new CurrencyUnitDeserializer();
      JsonParser jsonParser0 = mock(JsonParser.class, new ViolatedAssumptionAnswer());
      doReturn("[b").when(jsonParser0).getValueAsString();
      DeserializationContext deserializationContext0 = mock(DeserializationContext.class, new ViolatedAssumptionAnswer());
      // Undeclared exception!
      try { 
        currencyUnitDeserializer0.deserializeWithType(jsonParser0, deserializationContext0, (TypeDeserializer) null);
        fail("Expecting exception: UnknownCurrencyException");
      
      } catch(UnknownCurrencyException e) {
         //
         // Unknown currency code: [b
         //
         verifyException("javax.money.spi.MonetaryCurrenciesSingletonSpi", e);
      }
  }

  @Test(timeout = 4000)
  public void test1()  throws Throwable  {
      CurrencyUnitDeserializer currencyUnitDeserializer0 = new CurrencyUnitDeserializer();
      JsonParser jsonParser0 = mock(JsonParser.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(jsonParser0).getValueAsString();
      DeserializationContext deserializationContext0 = mock(DeserializationContext.class, new ViolatedAssumptionAnswer());
      // Undeclared exception!
      try { 
        currencyUnitDeserializer0.deserialize(jsonParser0, deserializationContext0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Currency Code may not be null
         //
         verifyException("java.util.Objects", e);
      }
  }

  @Test(timeout = 4000)
  public void test2()  throws Throwable  {
      CurrencyUnitDeserializer currencyUnitDeserializer0 = new CurrencyUnitDeserializer();
      JsonParser jsonParser0 = mock(JsonParser.class, new ViolatedAssumptionAnswer());
      doReturn("as1x,!T{xe}sV#").when(jsonParser0).getValueAsString();
      DeserializationContext deserializationContext0 = mock(DeserializationContext.class, new ViolatedAssumptionAnswer());
      // Undeclared exception!
      try { 
        currencyUnitDeserializer0.deserialize(jsonParser0, deserializationContext0);
        fail("Expecting exception: UnknownCurrencyException");
      
      } catch(UnknownCurrencyException e) {
         //
         // Unknown currency code: as1x,!T{xe}sV#
         //
         verifyException("javax.money.spi.MonetaryCurrenciesSingletonSpi", e);
      }
  }

  @Test(timeout = 4000)
  public void test3()  throws Throwable  {
      CurrencyUnitDeserializer currencyUnitDeserializer0 = new CurrencyUnitDeserializer();
      DeserializationContext deserializationContext0 = mock(DeserializationContext.class, new ViolatedAssumptionAnswer());
      JsonParser jsonParser0 = mock(JsonParser.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(jsonParser0).getValueAsString();
      TypeDeserializer typeDeserializer0 = mock(TypeDeserializer.class, new ViolatedAssumptionAnswer());
      // Undeclared exception!
      try { 
        currencyUnitDeserializer0.deserializeWithType(jsonParser0, deserializationContext0, typeDeserializer0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Currency Code may not be null
         //
         verifyException("java.util.Objects", e);
      }
  }
}
