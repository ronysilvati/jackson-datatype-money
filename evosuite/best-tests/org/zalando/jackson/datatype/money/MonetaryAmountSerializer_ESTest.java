/*
 * This file was automatically generated by EvoSuite
 * Wed Feb 26 14:45:51 GMT 2020
 */

package org.zalando.jackson.datatype.money;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.fasterxml.jackson.core.JsonFactory;
import com.fasterxml.jackson.core.JsonFactoryBuilder;
import com.fasterxml.jackson.core.JsonGenerator;
import com.fasterxml.jackson.core.io.IOContext;
import com.fasterxml.jackson.core.json.WriterBasedJsonGenerator;
import com.fasterxml.jackson.core.util.BufferRecycler;
import com.fasterxml.jackson.databind.JavaType;
import com.fasterxml.jackson.databind.ObjectMapper;
import com.fasterxml.jackson.databind.SerializationFeature;
import com.fasterxml.jackson.databind.SerializerProvider;
import com.fasterxml.jackson.databind.cfg.DeserializerFactoryConfig;
import com.fasterxml.jackson.databind.deser.BeanDeserializerFactory;
import com.fasterxml.jackson.databind.deser.DefaultDeserializationContext;
import com.fasterxml.jackson.databind.jsonFormatVisitors.JsonFormatVisitorWrapper;
import com.fasterxml.jackson.databind.jsontype.TypeSerializer;
import com.fasterxml.jackson.databind.node.DecimalNode;
import com.fasterxml.jackson.databind.ser.DefaultSerializerProvider;
import com.fasterxml.jackson.databind.type.ArrayType;
import com.fasterxml.jackson.databind.type.SimpleType;
import com.fasterxml.jackson.databind.type.TypeFactory;
import java.io.OutputStream;
import java.io.PipedReader;
import java.io.PipedWriter;
import javax.money.MonetaryAmount;
import javax.money.convert.ExchangeRateProvider;
import javax.money.format.MonetaryAmountFormat;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.mock.java.io.MockFile;
import org.evosuite.runtime.mock.java.io.MockFileOutputStream;
import org.javamoney.moneta.FastMoney;
import org.javamoney.moneta.Money;
import org.javamoney.moneta.RoundedMoney;
import org.javamoney.moneta.ToStringMonetaryAmountFormat;
import org.javamoney.moneta.internal.JDKCurrencyAdapter;
import org.junit.runner.RunWith;
import org.zalando.jackson.datatype.money.AmountWriter;
import org.zalando.jackson.datatype.money.FieldNames;
import org.zalando.jackson.datatype.money.MonetaryAmountFormatFactory;
import org.zalando.jackson.datatype.money.MonetaryAmountSerializer;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class MonetaryAmountSerializer_ESTest extends MonetaryAmountSerializer_ESTest_scaffolding {

  /**
   * COMPREENSÍVEL: Sim
   * DE FÁCIL CRIAÇÃO: Sim
   * IMPORTANTE PARA O CONTEXTO: Sim
   * ----------------------------------------------------------
   * DESCRIÇÃO: Verifica se o serialize realmente falha ao tentar
   * serializar valores nulos.
   * ----------------------------------------------------------
  */
  @Test(timeout = 4000)
  public void test0()  throws Throwable  {
      FieldNames fieldNames0 = FieldNames.DEFAULT;
      AmountWriter<DecimalNode> amountWriter0 = (AmountWriter<DecimalNode>) mock(AmountWriter.class, new ViolatedAssumptionAnswer());
      MonetaryAmountFormatFactory monetaryAmountFormatFactory0 = mock(MonetaryAmountFormatFactory.class, new ViolatedAssumptionAnswer());
      MonetaryAmountSerializer monetaryAmountSerializer0 = new MonetaryAmountSerializer(fieldNames0, amountWriter0, monetaryAmountFormatFactory0);
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = new DefaultSerializerProvider.Impl();
      // Undeclared exception!
      try { 
        monetaryAmountSerializer0.serialize((MonetaryAmount) null, (JsonGenerator) null, (SerializerProvider) defaultSerializerProvider_Impl0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.zalando.jackson.datatype.money.MonetaryAmountSerializer", e);
      }
  }

  /**
   * COMPREENSÍVEL: Não
   * DE FÁCIL CRIAÇÃO: Não
   * IMPORTANTE PARA O CONTEXTO: Não foi possível determinar
   * ----------------------------------------------------------
   * DESCRIÇÃO: A complexidade de preparação do teste não permitiu
   * uma melhor compreensão do mesmo. Portanto não é possível determinar
   * se o teste é importante para o contexto.
   * ----------------------------------------------------------
  */
  @Test(timeout = 4000)
  public void test1()  throws Throwable  {
      FieldNames fieldNames0 = FieldNames.defaults();
      AmountWriter<SerializationFeature> amountWriter0 = (AmountWriter<SerializationFeature>) mock(AmountWriter.class, new ViolatedAssumptionAnswer());
      doReturn((Object) null).when(amountWriter0).write(any(javax.money.MonetaryAmount.class));
      MonetaryAmountFormatFactory monetaryAmountFormatFactory0 = mock(MonetaryAmountFormatFactory.class, new ViolatedAssumptionAnswer());
      doReturn((MonetaryAmountFormat) null).when(monetaryAmountFormatFactory0).create(any(java.util.Locale.class));
      MonetaryAmountSerializer monetaryAmountSerializer0 = new MonetaryAmountSerializer(fieldNames0, amountWriter0, monetaryAmountFormatFactory0);
      FastMoney fastMoney0 = FastMoney.MAX_VALUE;
      JsonFactoryBuilder jsonFactoryBuilder0 = new JsonFactoryBuilder();
      JsonFactory jsonFactory0 = new JsonFactory(jsonFactoryBuilder0);
      MockFile mockFile0 = new MockFile("JSON", "");
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream(mockFile0);
      JsonGenerator jsonGenerator0 = jsonFactory0.createGenerator((OutputStream) mockFileOutputStream0);
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = new DefaultSerializerProvider.Impl();
      DeserializerFactoryConfig deserializerFactoryConfig0 = new DeserializerFactoryConfig();
      BeanDeserializerFactory beanDeserializerFactory0 = new BeanDeserializerFactory(deserializerFactoryConfig0);
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
      ObjectMapper objectMapper0 = new ObjectMapper(jsonFactory0, defaultSerializerProvider_Impl0, defaultDeserializationContext_Impl0);
      SerializerProvider serializerProvider0 = objectMapper0.getSerializerProviderInstance();
      // Undeclared exception!
      try { 
        monetaryAmountSerializer0.serialize((MonetaryAmount) fastMoney0, jsonGenerator0, serializerProvider0);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // No ObjectCodec defined for the generator, can only serialize simple wrapper types (type passed org.javamoney.moneta.internal.JDKCurrencyAdapter)
         //
         verifyException("com.fasterxml.jackson.core.JsonGenerator", e);
      }
  }

  /**
   * COMPREENSÍVEL: Não
   * DE FÁCIL CRIAÇÃO: Não
   * IMPORTANTE PARA O CONTEXTO: Não foi possível determinar
   * ----------------------------------------------------------
   * DESCRIÇÃO: A complexidade de preparação do teste não permitiu
   * uma melhor compreensão do mesmo. Portanto não é possível determinar
   * se o teste é importante para o contexto.
   * ----------------------------------------------------------
  */
  @Test(timeout = 4000)
  public void test2()  throws Throwable  {
      FieldNames fieldNames0 = FieldNames.DEFAULT;
      MonetaryAmountFormatFactory monetaryAmountFormatFactory0 = mock(MonetaryAmountFormatFactory.class, new ViolatedAssumptionAnswer());
      doReturn((MonetaryAmountFormat) null).when(monetaryAmountFormatFactory0).create(any(java.util.Locale.class));
      FastMoney fastMoney0 = FastMoney.MAX_VALUE;
      ObjectMapper objectMapper0 = new ObjectMapper();
      SerializerProvider serializerProvider0 = objectMapper0.getSerializerProviderInstance();
      AmountWriter<ExchangeRateProvider> amountWriter0 = (AmountWriter<ExchangeRateProvider>) mock(AmountWriter.class, new ViolatedAssumptionAnswer());
      doReturn((ExchangeRateProvider) null).when(amountWriter0).write(any(javax.money.MonetaryAmount.class));
      MonetaryAmountSerializer monetaryAmountSerializer0 = new MonetaryAmountSerializer(fieldNames0, amountWriter0, monetaryAmountFormatFactory0);
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, fastMoney0, true);
      PipedReader pipedReader0 = new PipedReader(271);
      PipedWriter pipedWriter0 = new PipedWriter(pipedReader0);
      WriterBasedJsonGenerator writerBasedJsonGenerator0 = new WriterBasedJsonGenerator(iOContext0, (-1595), objectMapper0, pipedWriter0, 'u');
      monetaryAmountSerializer0.serialize((MonetaryAmount) fastMoney0, (JsonGenerator) writerBasedJsonGenerator0, serializerProvider0);
      assertEquals(1, writerBasedJsonGenerator0.getOutputBuffered());
  }

  /**
   * COMPREENSÍVEL: Não
   * DE FÁCIL CRIAÇÃO: Não
   * IMPORTANTE PARA O CONTEXTO: Não foi possível determinar
   * ----------------------------------------------------------
   * DESCRIÇÃO: A complexidade de preparação do teste não permitiu
   * uma melhor compreensão do mesmo. Portanto não é possível determinar
   * se o teste é importante para o contexto.
   * ----------------------------------------------------------
  */
  @Test(timeout = 4000)
  public void test3()  throws Throwable  {
      FieldNames fieldNames0 = FieldNames.DEFAULT;
      AmountWriter<Object> amountWriter0 = (AmountWriter<Object>) mock(AmountWriter.class, new ViolatedAssumptionAnswer());
      MonetaryAmountFormatFactory monetaryAmountFormatFactory0 = mock(MonetaryAmountFormatFactory.class, new ViolatedAssumptionAnswer());
      MonetaryAmountSerializer monetaryAmountSerializer0 = new MonetaryAmountSerializer(fieldNames0, amountWriter0, monetaryAmountFormatFactory0);
      JsonFormatVisitorWrapper.Base jsonFormatVisitorWrapper_Base0 = new JsonFormatVisitorWrapper.Base();
      monetaryAmountSerializer0.acceptJsonFormatVisitor(jsonFormatVisitorWrapper_Base0, (JavaType) null);
      assertFalse(monetaryAmountSerializer0.usesObjectId());
  }

  /**
   * COMPREENSÍVEL: Não
   * DE FÁCIL CRIAÇÃO: Não
   * IMPORTANTE PARA O CONTEXTO: Não foi possível determinar
   * ----------------------------------------------------------
   * DESCRIÇÃO: A complexidade de preparação do teste não permitiu
   * uma melhor compreensão do mesmo. Portanto não é possível determinar
   * se o teste é importante para o contexto. Mas aparentemente
   * o teste verifica o limite superior de um valor passado para
   * serialização.
   * ----------------------------------------------------------
  */
  @Test(timeout = 4000)
  public void test4()  throws Throwable  {
      FieldNames fieldNames0 = FieldNames.DEFAULT;
      ToStringMonetaryAmountFormat.ToStringMonetaryAmountFormatStyle toStringMonetaryAmountFormat_ToStringMonetaryAmountFormatStyle0 = ToStringMonetaryAmountFormat.ToStringMonetaryAmountFormatStyle.MONEY;
      ToStringMonetaryAmountFormat toStringMonetaryAmountFormat0 = ToStringMonetaryAmountFormat.of(toStringMonetaryAmountFormat_ToStringMonetaryAmountFormatStyle0);
      MonetaryAmountFormatFactory monetaryAmountFormatFactory0 = mock(MonetaryAmountFormatFactory.class, new ViolatedAssumptionAnswer());
      doReturn(toStringMonetaryAmountFormat0).when(monetaryAmountFormatFactory0).create(any(java.util.Locale.class));
      FastMoney fastMoney0 = FastMoney.MAX_VALUE;
      ObjectMapper objectMapper0 = new ObjectMapper();
      SerializerProvider serializerProvider0 = objectMapper0.getSerializerProviderInstance();
      AmountWriter<JDKCurrencyAdapter> amountWriter0 = (AmountWriter<JDKCurrencyAdapter>) mock(AmountWriter.class, new ViolatedAssumptionAnswer());
      MonetaryAmountSerializer monetaryAmountSerializer0 = new MonetaryAmountSerializer(fieldNames0, amountWriter0, monetaryAmountFormatFactory0);
      // Undeclared exception!
      try { 
        monetaryAmountSerializer0.serializeWithType((MonetaryAmount) fastMoney0, (JsonGenerator) null, serializerProvider0, (TypeSerializer) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.zalando.jackson.datatype.money.MonetaryAmountSerializer", e);
      }
  }
}
