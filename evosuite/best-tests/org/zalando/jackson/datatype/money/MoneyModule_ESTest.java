/*
 * This file was automatically generated by EvoSuite
 * Wed Feb 26 14:47:36 GMT 2020
 */

package org.zalando.jackson.datatype.money;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.fasterxml.jackson.core.Version;
import com.fasterxml.jackson.databind.Module;
import javax.money.MonetaryAmount;
import javax.money.MonetaryOperator;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.javamoney.moneta.RoundedMoney;
import org.junit.runner.RunWith;
import org.zalando.jackson.datatype.money.AmountWriter;
import org.zalando.jackson.datatype.money.MonetaryAmountFactory;
import org.zalando.jackson.datatype.money.MonetaryAmountFormatFactory;
import org.zalando.jackson.datatype.money.MoneyModule;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class MoneyModule_ESTest extends MoneyModule_ESTest_scaffolding {

  /**
   * COMPREENSÍVEL: Sim
   * DE FÁCIL CRIAÇÃO: Sim
   * IMPORTANTE PARA O CONTEXTO: Sim
   * ----------------------------------------------------------
   * DESCRIÇÃO: Verifica se o método setupModule realmente 
   * retorna uma exceção quando o parâmetro 'context' é enviado
   * nulo.
   * ----------------------------------------------------------
  */	
  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      MoneyModule moneyModule0 = new MoneyModule();
      // Undeclared exception!
      try { 
        moneyModule0.setupModule((Module.SetupContext) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.zalando.jackson.datatype.money.MoneyModule", e);
      }
  }

  	
  /**
   * COMPREENSÍVEL: Sim
   * DE FÁCIL CRIAÇÃO: Sim
   * IMPORTANTE PARA O CONTEXTO: Sim
   * ----------------------------------------------------------
   * DESCRIÇÃO: Verifica se uma instância de MoneyModule 'default'
   * é diferente de uma instancia de MoneyModule 'withMonetaryAmount'
   * ----------------------------------------------------------
  */
  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      MoneyModule moneyModule0 = new MoneyModule();
      MoneyModule moneyModule1 = moneyModule0.withMonetaryAmount((MonetaryAmountFactory<? extends MonetaryAmount>) null);
      assertFalse(moneyModule1.equals((Object)moneyModule0));
  }

  /**
   * COMPREENSÍVEL: Sim
   * DE FÁCIL CRIAÇÃO: Sim
   * IMPORTANTE PARA O CONTEXTO: Sim
   * ----------------------------------------------------------
   * DESCRIÇÃO: Verifica se uma instância de MoneyModule 'default'
   * é diferente de uma instancia de MoneyModule 'withFormatting'
   * ----------------------------------------------------------
  */
  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      MoneyModule moneyModule0 = new MoneyModule();
      MoneyModule moneyModule1 = moneyModule0.withFormatting((MonetaryAmountFormatFactory) null);
      assertFalse(moneyModule1.equals((Object)moneyModule0));
  }

  /**
   * COMPREENSÍVEL: Sim
   * DE FÁCIL CRIAÇÃO: Sim
   * IMPORTANTE PARA O CONTEXTO: Sim
   * ----------------------------------------------------------
   * DESCRIÇÃO: Verifica se uma instância de MoneyModule 'default'
   * é diferente de uma instancia de MoneyModule 'withMoney'
   * ----------------------------------------------------------
  */
  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      MoneyModule moneyModule0 = new MoneyModule();
      MoneyModule moneyModule1 = moneyModule0.withMoney();
      assertFalse(moneyModule1.equals((Object)moneyModule0));
  }

  /**
   * COMPREENSÍVEL: Sim
   * DE FÁCIL CRIAÇÃO: Sim
   * IMPORTANTE PARA O CONTEXTO: Sim
   * ----------------------------------------------------------
   * DESCRIÇÃO: Verifica se uma instância de MoneyModule 'default'
   * é diferente de uma instancia de MoneyModule 'withDecimalNumbers'
   * ----------------------------------------------------------
  */
  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      MoneyModule moneyModule0 = new MoneyModule();
      MoneyModule moneyModule1 = moneyModule0.withDecimalNumbers();
      assertFalse(moneyModule1.equals((Object)moneyModule0));
  }


  /**
   * COMPREENSÍVEL: Sim
   * DE FÁCIL CRIAÇÃO: Sim
   * IMPORTANTE PARA O CONTEXTO: Sim
   * ----------------------------------------------------------
   * DESCRIÇÃO: Verifica se uma instância de MoneyModule 'default'
   * é diferente de uma instancia de MoneyModule 'withFastMoney'
   * ----------------------------------------------------------
  */
  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      MoneyModule moneyModule0 = new MoneyModule();
      MoneyModule moneyModule1 = moneyModule0.withFastMoney();
      assertFalse(moneyModule1.equals((Object)moneyModule0));
  }

  /**
   * COMPREENSÍVEL: Sim
   * DE FÁCIL CRIAÇÃO: Sim
   * IMPORTANTE PARA O CONTEXTO: Sim
   * ----------------------------------------------------------
   * DESCRIÇÃO: Verifica se o método getModuleName realmente
   * retorna o nome do módulo.
   * ----------------------------------------------------------
  */
  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      MoneyModule moneyModule0 = new MoneyModule();
      String string0 = moneyModule0.getModuleName();
      assertEquals("MoneyModule", string0);
  }

  /**
   * COMPREENSÍVEL: Sim
   * DE FÁCIL CRIAÇÃO: Sim
   * IMPORTANTE PARA O CONTEXTO: Sim
   * ----------------------------------------------------------
   * DESCRIÇÃO: Verifica se uma instância de MoneyModule 'default'
   * é diferente de uma instancia de MoneyModule 'withCurrencyFieldName'
   * ----------------------------------------------------------
  */
  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      MoneyModule moneyModule0 = new MoneyModule();
      MoneyModule moneyModule1 = moneyModule0.withCurrencyFieldName("MoneyModule");
      assertFalse(moneyModule1.equals((Object)moneyModule0));
  }

  /**
   * COMPREENSÍVEL: Sim
   * DE FÁCIL CRIAÇÃO: Sim
   * IMPORTANTE PARA O CONTEXTO: Sim
   * ----------------------------------------------------------
   * DESCRIÇÃO: Verifica se uma instância de MoneyModule 'default'
   * é diferente de uma instancia de MoneyModule 'withDefaultFormatting'
   * ----------------------------------------------------------
  */
  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      MoneyModule moneyModule0 = new MoneyModule();
      MoneyModule moneyModule1 = moneyModule0.withDefaultFormatting();
      assertFalse(moneyModule1.equals((Object)moneyModule0));
  }

  /**
   * COMPREENSÍVEL: Sim
   * DE FÁCIL CRIAÇÃO: Sim
   * IMPORTANTE PARA O CONTEXTO: Sim
   * ----------------------------------------------------------
   * DESCRIÇÃO: Verifica se uma instância de MoneyModule 'default'
   * é diferente de uma instancia de MoneyModule 'withoutFormatting'
   * ----------------------------------------------------------
  */
  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      MoneyModule moneyModule0 = new MoneyModule();
      MoneyModule moneyModule1 = moneyModule0.withoutFormatting();
      assertNotSame(moneyModule0, moneyModule1);
  }



  /**
   * COMPREENSÍVEL: Sim
   * DE FÁCIL CRIAÇÃO: Sim
   * IMPORTANTE PARA O CONTEXTO: Sim
   * ----------------------------------------------------------
   * DESCRIÇÃO: Verifica se uma instância de MoneyModule 'default'
   * é diferente de uma instancia de MoneyModule 'withQuotedDecimalNumbers'
   * ----------------------------------------------------------
  */
  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      MoneyModule moneyModule0 = new MoneyModule();
      MoneyModule moneyModule1 = moneyModule0.withQuotedDecimalNumbers();
      assertNotSame(moneyModule0, moneyModule1);
  }


  /**
   * COMPREENSÍVEL: Sim
   * DE FÁCIL CRIAÇÃO: Sim
   * IMPORTANTE PARA O CONTEXTO: Sim
   * ----------------------------------------------------------
   * DESCRIÇÃO: Verifica se uma instância de MoneyModule 'default'
   * é diferente de uma instancia de MoneyModule 'withRoundedMoney'
   * ----------------------------------------------------------
  */
  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      MoneyModule moneyModule0 = new MoneyModule();
      MoneyModule moneyModule1 = moneyModule0.withRoundedMoney();
      assertFalse(moneyModule1.equals((Object)moneyModule0));
  }
}
