/*
 * This file was automatically generated by EvoSuite
 * Wed Feb 26 14:47:43 GMT 2020
 */

package org.zalando.jackson.datatype.money;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.fasterxml.jackson.core.JsonFactory;
import com.fasterxml.jackson.core.JsonFactoryBuilder;
import com.fasterxml.jackson.core.JsonParser;
import com.fasterxml.jackson.core.io.IOContext;
import com.fasterxml.jackson.core.json.ReaderBasedJsonParser;
import com.fasterxml.jackson.core.sym.CharsToNameCanonicalizer;
import com.fasterxml.jackson.core.util.BufferRecycler;
import com.fasterxml.jackson.core.util.JsonParserSequence;
import com.fasterxml.jackson.databind.DeserializationContext;
import com.fasterxml.jackson.databind.ObjectMapper;
import com.fasterxml.jackson.databind.ObjectReader;
import com.fasterxml.jackson.databind.cfg.ContextAttributes;
import com.fasterxml.jackson.databind.cfg.DeserializerFactoryConfig;
import com.fasterxml.jackson.databind.deser.BeanDeserializerFactory;
import com.fasterxml.jackson.databind.deser.DefaultDeserializationContext;
import com.fasterxml.jackson.databind.jsontype.TypeDeserializer;
import java.io.CharConversionException;
import java.io.IOException;
import java.io.PipedReader;
import java.io.PipedWriter;
import java.io.Reader;
import java.io.StringReader;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.javamoney.moneta.FastMoney;
import org.javamoney.moneta.Money;
import org.javamoney.moneta.RoundedMoney;
import org.junit.runner.RunWith;
import org.zalando.jackson.datatype.money.FieldNames;
import org.zalando.jackson.datatype.money.MonetaryAmountDeserializer;
import org.zalando.jackson.datatype.money.MonetaryAmountFactory;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class MonetaryAmountDeserializer_ESTest extends MonetaryAmountDeserializer_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      MonetaryAmountFactory<FastMoney> monetaryAmountFactory0 = (MonetaryAmountFactory<FastMoney>) mock(MonetaryAmountFactory.class, new ViolatedAssumptionAnswer());
      FieldNames fieldNames0 = FieldNames.defaults();
      MonetaryAmountDeserializer<FastMoney> monetaryAmountDeserializer0 = new MonetaryAmountDeserializer<FastMoney>(monetaryAmountFactory0, fieldNames0);
      JsonFactory jsonFactory0 = new JsonFactory();
      char[] charArray0 = new char[0];
      JsonParser jsonParser0 = jsonFactory0.createParser(charArray0, 1596, 1596);
      // Undeclared exception!
      try { 
        monetaryAmountDeserializer0.deserializeWithType(jsonParser0, (DeserializationContext) null, (TypeDeserializer) null);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 1596
         //
         verifyException("com.fasterxml.jackson.core.json.ReaderBasedJsonParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      FieldNames fieldNames0 = FieldNames.DEFAULT;
      MonetaryAmountDeserializer<FastMoney> monetaryAmountDeserializer0 = new MonetaryAmountDeserializer<FastMoney>((MonetaryAmountFactory<FastMoney>) null, fieldNames0);
      JsonFactory jsonFactory0 = new JsonFactory();
      PipedReader pipedReader0 = new PipedReader();
      JsonParser jsonParser0 = jsonFactory0.createParser((Reader) pipedReader0);
      DeserializerFactoryConfig deserializerFactoryConfig0 = new DeserializerFactoryConfig();
      BeanDeserializerFactory beanDeserializerFactory0 = new BeanDeserializerFactory(deserializerFactoryConfig0);
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
      try { 
        monetaryAmountDeserializer0.deserializeWithType(jsonParser0, (DeserializationContext) defaultDeserializationContext_Impl0, (TypeDeserializer) null);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Pipe not connected
         //
         verifyException("java.io.PipedReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      MonetaryAmountFactory<FastMoney> monetaryAmountFactory0 = (MonetaryAmountFactory<FastMoney>) mock(MonetaryAmountFactory.class, new ViolatedAssumptionAnswer());
      FieldNames fieldNames0 = FieldNames.defaults();
      MonetaryAmountDeserializer<FastMoney> monetaryAmountDeserializer0 = new MonetaryAmountDeserializer<FastMoney>(monetaryAmountFactory0, fieldNames0);
      JsonFactoryBuilder jsonFactoryBuilder0 = new JsonFactoryBuilder();
      JsonFactory jsonFactory0 = new JsonFactory(jsonFactoryBuilder0);
      JsonParser jsonParser0 = jsonFactory0.createParser("^rUO4B/=]:mx.N(");
      try { 
        monetaryAmountDeserializer0.deserializeWithType(jsonParser0, (DeserializationContext) null, (TypeDeserializer) null);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Unexpected character ('^' (code 94)): expected a valid value (JSON String, Number, Array, Object or token 'null', 'true' or 'false')
         //  at [Source: (String)\"^rUO4B/=]:mx.N(\"; line: 1, column: 2]
         //
         verifyException("com.fasterxml.jackson.core.JsonParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      JsonFactoryBuilder jsonFactoryBuilder0 = new JsonFactoryBuilder();
      FieldNames fieldNames0 = FieldNames.defaults();
      MonetaryAmountFactory<RoundedMoney> monetaryAmountFactory0 = (MonetaryAmountFactory<RoundedMoney>) mock(MonetaryAmountFactory.class, new ViolatedAssumptionAnswer());
      MonetaryAmountDeserializer<RoundedMoney> monetaryAmountDeserializer0 = new MonetaryAmountDeserializer<RoundedMoney>(monetaryAmountFactory0, fieldNames0);
      JsonFactory jsonFactory0 = new JsonFactory(jsonFactoryBuilder0);
      char[] charArray0 = new char[2];
      charArray0[0] = '\"';
      charArray0[1] = '{';
      JsonParser jsonParser0 = jsonFactory0.createParser(charArray0);
      BeanDeserializerFactory beanDeserializerFactory0 = BeanDeserializerFactory.instance;
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
      try { 
        monetaryAmountDeserializer0.deserializeWithType(jsonParser0, (DeserializationContext) defaultDeserializationContext_Impl0, (TypeDeserializer) null);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Unexpected end-of-input: was expecting closing quote for a string value
         //  at [Source: (char[])\"\"{\"; line: 1, column: 3]
         //
         verifyException("com.fasterxml.jackson.core.base.ParserMinimalBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      FieldNames fieldNames0 = FieldNames.defaults();
      MonetaryAmountDeserializer<RoundedMoney> monetaryAmountDeserializer0 = new MonetaryAmountDeserializer<RoundedMoney>((MonetaryAmountFactory<RoundedMoney>) null, fieldNames0);
      JsonFactory jsonFactory0 = new JsonFactory();
      BeanDeserializerFactory beanDeserializerFactory0 = BeanDeserializerFactory.instance;
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
      JsonParser jsonParser0 = jsonFactory0.createNonBlockingByteArrayParser();
      // Undeclared exception!
      try { 
        monetaryAmountDeserializer0.deserialize(jsonParser0, (DeserializationContext) defaultDeserializationContext_Impl0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      MonetaryAmountFactory<FastMoney> monetaryAmountFactory0 = (MonetaryAmountFactory<FastMoney>) mock(MonetaryAmountFactory.class, new ViolatedAssumptionAnswer());
      FieldNames fieldNames0 = FieldNames.defaults();
      MonetaryAmountDeserializer<FastMoney> monetaryAmountDeserializer0 = new MonetaryAmountDeserializer<FastMoney>(monetaryAmountFactory0, fieldNames0);
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, fieldNames0, false);
      PipedWriter pipedWriter0 = new PipedWriter();
      PipedReader pipedReader0 = new PipedReader(pipedWriter0, 350);
      ObjectMapper objectMapper0 = new ObjectMapper();
      ContextAttributes contextAttributes0 = ContextAttributes.Impl.getEmpty();
      ObjectReader objectReader0 = objectMapper0.reader(contextAttributes0);
      CharsToNameCanonicalizer charsToNameCanonicalizer0 = CharsToNameCanonicalizer.createRoot();
      char[] charArray0 = new char[4];
      ReaderBasedJsonParser readerBasedJsonParser0 = new ReaderBasedJsonParser(iOContext0, 1621, pipedReader0, objectReader0, charsToNameCanonicalizer0, charArray0, 23, 108, true);
      // Undeclared exception!
      try { 
        monetaryAmountDeserializer0.deserialize((JsonParser) readerBasedJsonParser0, (DeserializationContext) null);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 23
         //
         verifyException("com.fasterxml.jackson.core.json.ReaderBasedJsonParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      FieldNames fieldNames0 = FieldNames.valueOf("V{C&'|dnQbDt", "V{C&'|dnQbDt", "V{C&'|dnQbDt");
      MonetaryAmountFactory<RoundedMoney> monetaryAmountFactory0 = (MonetaryAmountFactory<RoundedMoney>) mock(MonetaryAmountFactory.class, new ViolatedAssumptionAnswer());
      MonetaryAmountDeserializer<RoundedMoney> monetaryAmountDeserializer0 = new MonetaryAmountDeserializer<RoundedMoney>(monetaryAmountFactory0, fieldNames0);
      IOContext iOContext0 = new IOContext((BufferRecycler) null, "V{C&'|dnQbDt", true);
      PipedReader pipedReader0 = new PipedReader();
      ObjectMapper objectMapper0 = new ObjectMapper();
      CharsToNameCanonicalizer charsToNameCanonicalizer0 = CharsToNameCanonicalizer.createRoot();
      char[] charArray0 = new char[3];
      ReaderBasedJsonParser readerBasedJsonParser0 = new ReaderBasedJsonParser(iOContext0, (-833), pipedReader0, objectMapper0, charsToNameCanonicalizer0, charArray0, 33, (-833), true);
      BeanDeserializerFactory beanDeserializerFactory0 = BeanDeserializerFactory.instance;
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
      try { 
        monetaryAmountDeserializer0.deserialize((JsonParser) readerBasedJsonParser0, (DeserializationContext) defaultDeserializationContext_Impl0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Pipe not connected
         //
         verifyException("java.io.PipedReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      MonetaryAmountFactory<RoundedMoney> monetaryAmountFactory0 = (MonetaryAmountFactory<RoundedMoney>) mock(MonetaryAmountFactory.class, new ViolatedAssumptionAnswer());
      MonetaryAmountDeserializer<RoundedMoney> monetaryAmountDeserializer0 = new MonetaryAmountDeserializer<RoundedMoney>(monetaryAmountFactory0, (FieldNames) null);
      JsonFactory jsonFactory0 = new JsonFactory();
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)3;
      byteArray0[7] = (byte) (-100);
      JsonParser jsonParser0 = jsonFactory0.createParser(byteArray0);
      DeserializerFactoryConfig deserializerFactoryConfig0 = new DeserializerFactoryConfig();
      BeanDeserializerFactory beanDeserializerFactory0 = new BeanDeserializerFactory(deserializerFactoryConfig0);
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
      try { 
        monetaryAmountDeserializer0.deserialize(jsonParser0, (DeserializationContext) defaultDeserializationContext_Impl0);
        fail("Expecting exception: CharConversionException");
      
      } catch(CharConversionException e) {
         //
         // Invalid UTF-32 character 0x9bff0000 (above 0x0010ffff) at char #1, byte #7)
         //
         verifyException("com.fasterxml.jackson.core.io.UTF32Reader", e);
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      MonetaryAmountFactory<FastMoney> monetaryAmountFactory0 = (MonetaryAmountFactory<FastMoney>) mock(MonetaryAmountFactory.class, new ViolatedAssumptionAnswer());
      FieldNames fieldNames0 = FieldNames.defaults();
      MonetaryAmountDeserializer<FastMoney> monetaryAmountDeserializer0 = new MonetaryAmountDeserializer<FastMoney>(monetaryAmountFactory0, fieldNames0);
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, "B[A=iazN5ZF<vv>", false);
      StringReader stringReader0 = new StringReader("B[A=iazN5ZF<vv>");
      ObjectMapper objectMapper0 = new ObjectMapper();
      CharsToNameCanonicalizer charsToNameCanonicalizer0 = CharsToNameCanonicalizer.createRoot();
      ReaderBasedJsonParser readerBasedJsonParser0 = new ReaderBasedJsonParser(iOContext0, (-818), stringReader0, objectMapper0, charsToNameCanonicalizer0);
      JsonParserSequence jsonParserSequence0 = JsonParserSequence.createFlattened(false, (JsonParser) readerBasedJsonParser0, (JsonParser) readerBasedJsonParser0);
      DeserializerFactoryConfig deserializerFactoryConfig0 = new DeserializerFactoryConfig();
      BeanDeserializerFactory beanDeserializerFactory0 = new BeanDeserializerFactory(deserializerFactoryConfig0);
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
      try { 
        monetaryAmountDeserializer0.deserialize((JsonParser) jsonParserSequence0, (DeserializationContext) defaultDeserializationContext_Impl0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Unrecognized token 'B': was expecting (JSON String, Number, Array, Object or token 'null', 'true' or 'false')
         //  at [Source: (String)\"B[A=iazN5ZF<vv>\"; line: 1, column: 2]
         //
         verifyException("com.fasterxml.jackson.core.JsonParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      MonetaryAmountFactory<FastMoney> monetaryAmountFactory0 = (MonetaryAmountFactory<FastMoney>) mock(MonetaryAmountFactory.class, new ViolatedAssumptionAnswer());
      FieldNames fieldNames0 = FieldNames.valueOf("", "Failed to instantiate class %s, problem: %s", "");
      MonetaryAmountDeserializer<FastMoney> monetaryAmountDeserializer0 = new MonetaryAmountDeserializer<FastMoney>(monetaryAmountFactory0, fieldNames0);
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, monetaryAmountDeserializer0, true);
      StringReader stringReader0 = new StringReader("u8Tc9");
      ObjectMapper objectMapper0 = new ObjectMapper();
      CharsToNameCanonicalizer charsToNameCanonicalizer0 = CharsToNameCanonicalizer.createRoot();
      char[] charArray0 = new char[6];
      charArray0[2] = '\"';
      ReaderBasedJsonParser readerBasedJsonParser0 = new ReaderBasedJsonParser(iOContext0, 127, stringReader0, objectMapper0, charsToNameCanonicalizer0, charArray0, 2, 3, true);
      try { 
        monetaryAmountDeserializer0.deserialize((JsonParser) readerBasedJsonParser0, (DeserializationContext) null);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Unexpected end-of-input: was expecting closing quote for a string value
         //  at [Source: UNKNOWN; line: 1, column: 9]
         //
         verifyException("com.fasterxml.jackson.core.base.ParserMinimalBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      JsonFactory jsonFactory0 = new JsonFactory();
      FieldNames fieldNames0 = FieldNames.defaults();
      JsonParser jsonParser0 = jsonFactory0.createParser("");
      jsonParser0.overrideCurrentName("B{*@O.");
      DeserializationContext deserializationContext0 = objectMapper0.getDeserializationContext();
      MonetaryAmountFactory<FastMoney> monetaryAmountFactory0 = (MonetaryAmountFactory<FastMoney>) mock(MonetaryAmountFactory.class, new ViolatedAssumptionAnswer());
      MonetaryAmountDeserializer<FastMoney> monetaryAmountDeserializer0 = new MonetaryAmountDeserializer<FastMoney>(monetaryAmountFactory0, fieldNames0);
      // Undeclared exception!
      monetaryAmountDeserializer0.deserialize(jsonParser0, deserializationContext0);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      JsonFactory jsonFactory0 = new JsonFactory();
      MonetaryAmountFactory<Money> monetaryAmountFactory0 = (MonetaryAmountFactory<Money>) mock(MonetaryAmountFactory.class, new ViolatedAssumptionAnswer());
      FieldNames fieldNames0 = FieldNames.defaults();
      MonetaryAmountDeserializer<Money> monetaryAmountDeserializer0 = new MonetaryAmountDeserializer<Money>(monetaryAmountFactory0, fieldNames0);
      JsonParser jsonParser0 = jsonFactory0.createNonBlockingByteArrayParser();
      // Undeclared exception!
      try { 
        monetaryAmountDeserializer0.deserializeWithType(jsonParser0, (DeserializationContext) null, (TypeDeserializer) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
      }
  }
}
