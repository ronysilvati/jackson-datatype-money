/*
 * This file was automatically generated by EvoSuite
 * Wed Feb 26 14:45:35 GMT 2020
 */

package org.zalando.jackson.datatype.money;

import org.junit.Test;
import static org.junit.Assert.*;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;
import org.zalando.jackson.datatype.money.FieldNames;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class FieldNames_ESTest extends FieldNames_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      FieldNames fieldNames0 = FieldNames.defaults();
      FieldNames fieldNames1 = fieldNames0.withFormatted((String) null);
      String string0 = fieldNames1.getFormatted();
      assertEquals("currency", fieldNames1.getCurrency());
      assertNull(string0);
      assertEquals("amount", fieldNames1.getAmount());
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      FieldNames fieldNames0 = FieldNames.valueOf("", (String) null, "");
      String string0 = fieldNames0.getFormatted();
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      FieldNames fieldNames0 = FieldNames.defaults();
      FieldNames fieldNames1 = fieldNames0.withCurrency((String) null);
      FieldNames fieldNames2 = fieldNames1.withFormatted("^");
      String string0 = fieldNames2.getCurrency();
      assertEquals("^", fieldNames2.getFormatted());
      assertEquals("amount", fieldNames2.getAmount());
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      FieldNames fieldNames0 = FieldNames.valueOf((String) null, "!cR3!", "!cR3!");
      String string0 = fieldNames0.getAmount();
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      FieldNames fieldNames0 = FieldNames.defaults();
      FieldNames fieldNames1 = fieldNames0.withAmount("");
      String string0 = fieldNames1.getAmount();
      assertEquals("formatted", fieldNames1.getFormatted());
      assertEquals("", string0);
      assertEquals("currency", fieldNames1.getCurrency());
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      FieldNames fieldNames0 = FieldNames.valueOf("_;ue8X5/{P7+Oys6t+", "_;ue8X5/{P7+Oys6t+", "");
      FieldNames fieldNames1 = fieldNames0.withFormatted("");
      //  // Unstable assertion: assertEquals("_;ue8X5/{P7+Oys6t+", fieldNames1.getAmount());
      //  // Unstable assertion: assertEquals("", fieldNames0.getFormatted());
      //  // Unstable assertion: assertEquals("_;ue8X5/{P7+Oys6t+", fieldNames1.getCurrency());
      //  // Unstable assertion: assertNotSame(fieldNames1, fieldNames0);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      FieldNames fieldNames0 = FieldNames.valueOf("_;ue8X5/{P7+Oys6t+", "_;ue8X5/{P7+Oys6t+", "");
      FieldNames fieldNames1 = fieldNames0.withCurrency("_;ue8X5/{P7+Oys6t+");
      //  // Unstable assertion: assertEquals("", fieldNames1.getFormatted());
      //  // Unstable assertion: assertEquals("_;ue8X5/{P7+Oys6t+", fieldNames1.getAmount());
      //  // Unstable assertion: assertEquals("_;ue8X5/{P7+Oys6t+", fieldNames0.getCurrency());
      //  // Unstable assertion: assertNotSame(fieldNames1, fieldNames0);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      FieldNames fieldNames0 = FieldNames.valueOf("_;ue8X5/{P7+Oys6t+", "_;ue8X5/{P7+Oys6t+", "");
      FieldNames fieldNames1 = fieldNames0.withCurrency("");
      String string0 = fieldNames1.getCurrency();
      assertEquals("_;ue8X5/{P7+Oys6t+", fieldNames0.getCurrency());
      assertEquals("", string0);
      assertEquals("_;ue8X5/{P7+Oys6t+", fieldNames1.getAmount());
      assertEquals("", fieldNames0.getFormatted());
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      FieldNames fieldNames0 = FieldNames.valueOf("_;ue8X5/{P7+Oys6t+", "_;ue8X5/{P7+Oys6t+", "");
      FieldNames fieldNames1 = fieldNames0.withAmount("_;ue8X5/{P7+Oys6t+");
      //  // Unstable assertion: assertEquals("", fieldNames1.getFormatted());
      //  // Unstable assertion: assertEquals("_;ue8X5/{P7+Oys6t+", fieldNames0.getAmount());
      //  // Unstable assertion: assertNotSame(fieldNames1, fieldNames0);
      //  // Unstable assertion: assertEquals("_;ue8X5/{P7+Oys6t+", fieldNames1.getCurrency());
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      FieldNames fieldNames0 = FieldNames.valueOf("_;ue8X5/{P7+Oys6t+", "_;ue8X5/{P7+Oys6t+", "");
      String string0 = fieldNames0.getAmount();
      assertEquals("", fieldNames0.getFormatted());
      assertEquals("_;ue8X5/{P7+Oys6t+", fieldNames0.getCurrency());
      assertEquals("_;ue8X5/{P7+Oys6t+", string0);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      FieldNames fieldNames0 = FieldNames.defaults();
      String string0 = fieldNames0.getFormatted();
      assertEquals("formatted", string0);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      FieldNames fieldNames0 = FieldNames.valueOf("_;ue8X5/{P7+Oys6t+", "_;ue8X5/{P7+Oys6t+", "");
      String string0 = fieldNames0.getCurrency();
      assertEquals("_;ue8X5/{P7+Oys6t+", fieldNames0.getAmount());
      assertEquals("", fieldNames0.getFormatted());
      assertEquals("_;ue8X5/{P7+Oys6t+", string0);
  }
}
